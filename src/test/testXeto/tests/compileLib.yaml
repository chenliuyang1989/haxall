#
# Tests for compiling libs and new types
#

---
name: "simple"
compileLib: |
  Foo: Dict
verifyTypes:
  Foo:
    base: "sys::Dict"
    meta:
      doc: "inherit"
---
name: "metaMarker"
compileLib: |
  Foo: Dict <abstract>
verifyTypes:
  Foo:
    base: "sys::Dict"
    meta:
      doc: "inherit"
      abstract: "sys::Marker"
---
name: "metaDoc"
compileLib: |
  // Foo doc
  Foo: Dict
verifyTypes:
  Foo:
    base: "sys::Dict"
    meta:
      doc: "sys::Str Foo doc"
---
name: "metaComplex"
compileLib: |
  // Foo doc
  Foo: Dict <abstract, x:"hi!">
  x: Str <meta>
verifyTypes:
  Foo:
    base: "sys::Dict"
    meta:
      doc: "sys::Str Foo doc"
      abstract: "sys::Marker"
      x: "sys::Str hi!"
---
name: "slotMarker"
compileLib: |
  Foo: { bar }
verifyTypes:
  Foo:
    base: "sys::Dict"
    meta:
      doc: "inherit"
    slots:
      bar:
        type: "sys::Marker"
        meta:
          doc: "inherit"
          val: "inherit"
---
name: "slotWithMeta"
compileLib: |
  Foo: Dict {
    bar: Marker <baz>
    qux: Str <corge : "garply", waldo: Date "2023-03-05">
  }
  baz: Marker <meta>
  corge: Str <meta>
  waldo: Date <meta>
verifyTypes:
  Foo:
    base: "sys::Dict"
    meta:
      doc: "inherit"
    slots:
      bar:
        type: "sys::Marker"
        meta:
          baz: "sys::Marker"
          doc: "inherit"
          val: "inherit"
      qux:
        type: "sys::Str"
        meta:
          corge: "sys::Str garply"
          waldo: "sys::Date 2023-03-05"
          doc: "inherit"
          val: "inherit"
---
name: "slotWithMetaAndDoc"
compileLib: |
  Foo: Dict {
    bar: Marker <baz>  // bar doc
    // qux doc
    qux: Str <corge : "garply", waldo: Date "2023-03-05">
  }
  baz: Marker <meta>
  corge: Str <meta>
  waldo: Date <meta>
verifyTypes:
  Foo:
    base: "sys::Dict"
    meta:
      doc: "inherit"
    slots:
      bar:
        type: "sys::Marker"
        meta:
          baz: "sys::Marker"
          doc: "sys::Str bar doc"
          val: "inherit"
      qux:
        type: "sys::Str"
        meta:
          corge: "sys::Str garply"
          waldo: "sys::Date 2023-03-05"
          doc: "sys::Str qux doc"
          val: "inherit"
---
name: "slotInherit"
compileLib: |
  A: {
    bar: Date <qux> "2023-02-05"
  }
  B : A
  qux: Marker <meta>
verifyTypes:
  A:
    base: "sys::Dict"
    meta:
      doc: "inherit"
    slots:
      bar:
        type: "sys::Date"
        meta:
          doc: "inherit"
          pattern: "inherit"
          qux: "sys::Marker"
          val: "sys::Date 2023-02-05"
  B:
    base: "test::A"
    meta:
      doc: "inherit"
    slots:
      bar: "inherit A"
---
name: "slotOverride"
compileLib: |
  A: {
    bar: Date <qux> "2023-02-05"
  }
  B : A {
    bar: Date <baz>
  }
  baz: Marker <meta>
  qux: Marker <meta>
verifyTypes:
  A:
    base: "sys::Dict"
    meta:
      doc: "inherit"
    slots:
      bar:
        type: "sys::Date"
        meta:
          doc: "inherit"
          pattern: "inherit"
          qux: "sys::Marker"
          val: "sys::Date 2023-02-05"
  B:
    base: "test::A"
    meta:
      doc: "inherit"
    slots:
      bar:
        type: "sys::Date"
        meta:
          doc: "inherit"
          pattern: "inherit"
          qux: "inherit"
          val: "inherit"
          baz: "sys::Marker"
---
name: "slotInference"
compileLib: |
  A: {
    foo: Date "2023-04-01"
    bar: Date? "2023-05-01"
  }
  B : A {
    foo: "2023-04-02"
    bar: "2023-05-02"
  }
verifyTypes:
  A:
    base: "sys::Dict"
    meta:
      doc: "inherit"
    slots:
      foo:
        type: "sys::Date"
        meta:
          doc: "inherit"
          pattern: "inherit"
          val: "sys::Date 2023-04-01"
      bar:
        type: "sys::Date"
        meta:
          doc: "inherit"
          pattern: "inherit"
          maybe: "sys::Marker"
          val: "sys::Date 2023-05-01"
  B:
    base: "test::A"
    meta:
      doc: "inherit"
    slots:
      foo:
        type: "sys::Date"
        meta:
          doc: "inherit"
          pattern: "inherit"
          val: "sys::Date 2023-04-02"
      bar:
        type: "sys::Date"
        meta:
          doc: "inherit"
          pattern: "inherit"
          maybe: "inherit"
          val: "sys::Date 2023-05-02"
---

